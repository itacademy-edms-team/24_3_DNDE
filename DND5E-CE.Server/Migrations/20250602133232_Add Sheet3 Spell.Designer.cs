// <auto-generated />
using System;
using DND5E_CE.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DND5E_CE.Server.Migrations
{
    [DbContext(typeof(DND5EContext))]
    [Migration("20250602133232_Add Sheet3 Spell")]
    partial class AddSheet3Spell
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DND5E_CE.Server.Models.App.CharacterModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Sheet2Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Sheet3Id")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Sheet1Id")
                        .IsUnique();

                    b.HasIndex("Sheet2Id")
                        .IsUnique();

                    b.HasIndex("Sheet3Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Characters", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.AbilityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CharismaBase")
                        .HasColumnType("integer");

                    b.Property<int>("ConstitutionBase")
                        .HasColumnType("integer");

                    b.Property<int>("DexterityBase")
                        .HasColumnType("integer");

                    b.Property<int>("IntelligenceBase")
                        .HasColumnType("integer");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.Property<int>("StrengthBase")
                        .HasColumnType("integer");

                    b.Property<int>("WisdomBase")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Abilities", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.AbilitySaveThrowModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSaveThrowCharismaProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaveThrowConstitutionProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaveThrowDexterityProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaveThrowIntelligenceProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaveThrowStrengthProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSaveThrowWisdomProficient")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AbilitySaveThrows", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.AttackModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AtkBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AtkBonus")
                        .HasColumnType("integer");

                    b.Property<string>("AtkCritRange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("AtkIsIncluded")
                        .HasColumnType("boolean");

                    b.Property<bool>("AtkIsProficient")
                        .HasColumnType("boolean");

                    b.Property<int>("AtkMagicBonus")
                        .HasColumnType("integer");

                    b.Property<string>("AtkRange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Damage1BondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Damage1Bonus")
                        .HasColumnType("integer");

                    b.Property<string>("Damage1CritDice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Damage1Dice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Damage1IsIncluded")
                        .HasColumnType("boolean");

                    b.Property<string>("Damage1Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Damage2BondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Damage2Bonus")
                        .HasColumnType("integer");

                    b.Property<string>("Damage2CritDice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Damage2Dice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Damage2IsIncluded")
                        .HasColumnType("boolean");

                    b.Property<string>("Damage2Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SaveEffect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SavingThrowBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SavingThrowDifficultyClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SavingThrowIsIncluded")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Sheet1Id");

                    b.ToTable("Attacks", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.ClassResourceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Current")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUsePb")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResetOn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Total")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ClassResources", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.DeathSaveThrowModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("FailuresTotal")
                        .HasColumnType("integer");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.Property<int>("SuccessTotal")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DeathSaveThrows", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.GlobalDamageModifierModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CriticalDamageDice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DamageDice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsIncluded")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Sheet1Id");

                    b.ToTable("GlobalDamageModifiers", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.HitDiceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Current")
                        .HasColumnType("integer");

                    b.Property<string>("DiceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Total")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("HitDices", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.HitPointModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Current")
                        .HasColumnType("integer");

                    b.Property<int>("Max")
                        .HasColumnType("integer");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Temp")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("HitPoints", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.InventoryGoldModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Cp")
                        .HasColumnType("integer");

                    b.Property<int>("Ep")
                        .HasColumnType("integer");

                    b.Property<int>("Gp")
                        .HasColumnType("integer");

                    b.Property<int>("Pp")
                        .HasColumnType("integer");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Sp")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("InventoryGold", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.InventoryItemModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEquipped")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHasAnAttack")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsedAsResource")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prop")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Sheet1Id");

                    b.ToTable("InventoryItems", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.OtherResourceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Current")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUsePb")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResetOn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Total")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Sheet1Id");

                    b.ToTable("OtherResources", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.OtherToolModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Sheet1Id");

                    b.ToTable("OtherTools", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AbilityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AbilitySaveThrowId")
                        .HasColumnType("uuid");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("integer");

                    b.Property<string>("Backstory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Bonds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ClassResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeathSaveThrowId")
                        .HasColumnType("uuid");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("Flaws")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HitDiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HitPointId")
                        .HasColumnType("uuid");

                    b.Property<string>("Ideals")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Initiative")
                        .HasColumnType("integer");

                    b.Property<Guid>("InventoryGoldId")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalityTraits")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.Property<string>("Worldview")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId")
                        .IsUnique();

                    b.HasIndex("AbilitySaveThrowId")
                        .IsUnique();

                    b.HasIndex("ClassResourceId")
                        .IsUnique();

                    b.HasIndex("DeathSaveThrowId")
                        .IsUnique();

                    b.HasIndex("HitDiceId")
                        .IsUnique();

                    b.HasIndex("HitPointId")
                        .IsUnique();

                    b.HasIndex("InventoryGoldId")
                        .IsUnique();

                    b.HasIndex("SkillId")
                        .IsUnique();

                    b.ToTable("Sheet1", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.SkillModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcrobaticsBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AnimalHandlingBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ArcanaBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AthleticsBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeceptionBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HistoryBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InsightBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IntimidationBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvestigationBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAcrobaticsProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnimalHandlingProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArcanaProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAthleticsProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeceptionProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistoryProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInsightProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIntimidationProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvestigationProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMedicineProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNatureProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerceptionProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerformanceProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPersuasionProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReligionProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSleightOfHandProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStealthProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSurvivalProficient")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicineBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NatureBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PerceptionBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PerformanceBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersuasionBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReligionBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.Property<string>("SleightOfHandBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StealthBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SurvivalBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.ToolModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Mods")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProficiencyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Sheet1Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Sheet1Id");

                    b.ToTable("Tools", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet2Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalFeaturesAndTraits")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AlliesAndOrganizations")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Appearance")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Backstory")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Eyes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hair")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Skin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Treasures")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sheet2", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet3.Sheet3Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<int>("RemainingSpellSlotsLevel1")
                        .HasColumnType("integer");

                    b.Property<int>("RemainingSpellSlotsLevel2")
                        .HasColumnType("integer");

                    b.Property<int>("RemainingSpellSlotsLevel3")
                        .HasColumnType("integer");

                    b.Property<int>("RemainingSpellSlotsLevel4")
                        .HasColumnType("integer");

                    b.Property<int>("RemainingSpellSlotsLevel5")
                        .HasColumnType("integer");

                    b.Property<int>("RemainingSpellSlotsLevel6")
                        .HasColumnType("integer");

                    b.Property<int>("RemainingSpellSlotsLevel7")
                        .HasColumnType("integer");

                    b.Property<int>("RemainingSpellSlotsLevel8")
                        .HasColumnType("integer");

                    b.Property<int>("RemainingSpellSlotsLevel9")
                        .HasColumnType("integer");

                    b.Property<string>("SpellBondAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sheet3", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet3.SpellModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AtHigherLevels")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AttackDamage1Dice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AttackDamage1Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AttackDamage2Dice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AttackDamage2Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AttackType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CantripProgression")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CastingTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ComponentsDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ComponentsM")
                        .HasColumnType("boolean");

                    b.Property<bool>("ComponentsS")
                        .HasColumnType("boolean");

                    b.Property<bool>("ComponentsV")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HealingDice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HigherLevelCastBonus")
                        .HasColumnType("integer");

                    b.Property<int>("HigherLevelCastDiceAmount")
                        .HasColumnType("integer");

                    b.Property<string>("HigherLevelCastDiceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IncludeSpellDescriptionInAttack")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Innate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAbilityModIncluded")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConcentration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrepared")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRitual")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SavingThrowAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SavingThrowEffect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Sheet3Id")
                        .HasColumnType("uuid");

                    b.Property<string>("SpellCastingAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Sheet3Id");

                    b.ToTable("Spells", "app");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.CsrfTokenModel", b =>
                {
                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.HasIndex("Token", "UserId")
                        .IsUnique();

                    b.ToTable("CsrfTokens", "tokens");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.RefreshTokenModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", "tokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "identity");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.CharacterModel", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "Sheet1")
                        .WithOne("Character")
                        .HasForeignKey("DND5E_CE.Server.Models.App.CharacterModel", "Sheet1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND5E_CE.Server.Models.App.Sheet2Model", "Sheet2")
                        .WithOne("Character")
                        .HasForeignKey("DND5E_CE.Server.Models.App.CharacterModel", "Sheet2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND5E_CE.Server.Models.App.Sheet3.Sheet3Model", "Sheet3")
                        .WithOne("Character")
                        .HasForeignKey("DND5E_CE.Server.Models.App.CharacterModel", "Sheet3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sheet1");

                    b.Navigation("Sheet2");

                    b.Navigation("Sheet3");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.AttackModel", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "Sheet1")
                        .WithMany("Attack")
                        .HasForeignKey("Sheet1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sheet1");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.GlobalDamageModifierModel", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "Sheet1")
                        .WithMany("GlobalDamageModifier")
                        .HasForeignKey("Sheet1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sheet1");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.InventoryItemModel", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "Sheet1")
                        .WithMany("InventoryItem")
                        .HasForeignKey("Sheet1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sheet1");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.OtherResourceModel", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "Sheet1")
                        .WithMany("OtherResource")
                        .HasForeignKey("Sheet1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sheet1");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.OtherToolModel", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "Sheet1")
                        .WithMany("OtherTool")
                        .HasForeignKey("Sheet1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sheet1");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.AbilityModel", "Ability")
                        .WithOne("Sheet1")
                        .HasForeignKey("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.AbilitySaveThrowModel", "AbilitySaveThrow")
                        .WithOne("Sheet1")
                        .HasForeignKey("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "AbilitySaveThrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.ClassResourceModel", "ClassResource")
                        .WithOne("Sheet1")
                        .HasForeignKey("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "ClassResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.DeathSaveThrowModel", "DeathSaveThrow")
                        .WithOne("Sheet1")
                        .HasForeignKey("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "DeathSaveThrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.HitDiceModel", "HitDice")
                        .WithOne("Sheet1")
                        .HasForeignKey("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "HitDiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.HitPointModel", "HitPoint")
                        .WithOne("Sheet1")
                        .HasForeignKey("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "HitPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.InventoryGoldModel", "InventoryGold")
                        .WithOne("Sheet1")
                        .HasForeignKey("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "InventoryGoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.SkillModel", "Skill")
                        .WithOne("Sheet1")
                        .HasForeignKey("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("AbilitySaveThrow");

                    b.Navigation("ClassResource");

                    b.Navigation("DeathSaveThrow");

                    b.Navigation("HitDice");

                    b.Navigation("HitPoint");

                    b.Navigation("InventoryGold");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.ToolModel", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", "Sheet1")
                        .WithMany("Tool")
                        .HasForeignKey("Sheet1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sheet1");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet3.SpellModel", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.App.Sheet3.Sheet3Model", "Sheet3")
                        .WithMany("Spell")
                        .HasForeignKey("Sheet3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sheet3");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.CsrfTokenModel", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.RefreshTokenModel", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.AbilityModel", b =>
                {
                    b.Navigation("Sheet1")
                        .IsRequired();
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.AbilitySaveThrowModel", b =>
                {
                    b.Navigation("Sheet1")
                        .IsRequired();
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.ClassResourceModel", b =>
                {
                    b.Navigation("Sheet1")
                        .IsRequired();
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.DeathSaveThrowModel", b =>
                {
                    b.Navigation("Sheet1")
                        .IsRequired();
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.HitDiceModel", b =>
                {
                    b.Navigation("Sheet1")
                        .IsRequired();
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.HitPointModel", b =>
                {
                    b.Navigation("Sheet1")
                        .IsRequired();
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.InventoryGoldModel", b =>
                {
                    b.Navigation("Sheet1")
                        .IsRequired();
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.Sheet1Model", b =>
                {
                    b.Navigation("Attack");

                    b.Navigation("Character")
                        .IsRequired();

                    b.Navigation("GlobalDamageModifier");

                    b.Navigation("InventoryItem");

                    b.Navigation("OtherResource");

                    b.Navigation("OtherTool");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet1.SkillModel", b =>
                {
                    b.Navigation("Sheet1")
                        .IsRequired();
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet2Model", b =>
                {
                    b.Navigation("Character")
                        .IsRequired();
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.App.Sheet3.Sheet3Model", b =>
                {
                    b.Navigation("Character")
                        .IsRequired();

                    b.Navigation("Spell");
                });
#pragma warning restore 612, 618
        }
    }
}
