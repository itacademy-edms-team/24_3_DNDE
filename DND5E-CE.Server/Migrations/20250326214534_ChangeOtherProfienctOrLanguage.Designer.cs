// <auto-generated />
using DND5E_CE.Server.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DND5E_CE.Server.Migrations
{
    [DbContext(typeof(DND5EContext))]
    [Migration("20250326214534_ChangeOtherProfienctOrLanguage")]
    partial class ChangeOtherProfienctOrLanguage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "character_ability_short", new[] { "STR", "DEX", "CON", "INT", "WIS", "CHA", "-" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "character_attribute", new[] { "strength", "dexterity", "constitution", "intelligence", "wisdom", "charisma" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "other_profiency_type", new[] { "armor", "language", "weapon", "other" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DND5E_CE.Server.Models.Ability", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int?>("Charisma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("charisma");

                    b.Property<int?>("CharismaBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("charisma_base");

                    b.Property<int?>("CharismaBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("charisma_bonus");

                    b.Property<int?>("Constitution")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("constitution");

                    b.Property<int?>("ConstitutionBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("constitution_base");

                    b.Property<int?>("ConstitutionBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("constitution_bonus");

                    b.Property<int?>("Dexterity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("dexterity");

                    b.Property<int?>("DexterityBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("dexterity_base");

                    b.Property<int?>("DexterityBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("dexterity_bonus");

                    b.Property<int?>("Intelligence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("intelligence");

                    b.Property<int?>("IntelligenceBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("intelligence_base");

                    b.Property<int?>("IntelligenceBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("intelligence_bonus");

                    b.Property<int?>("Strength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("strength");

                    b.Property<int?>("StrengthBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("strength_base");

                    b.Property<int?>("StrengthBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("strength_bonus");

                    b.Property<int?>("Wisdom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("wisdom");

                    b.Property<int?>("WisdomBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("wisdom_base");

                    b.Property<int?>("WisdomBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("wisdom_bonus");

                    b.HasKey("CharacterId")
                        .HasName("ability_pkey");

                    b.ToTable("ability", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.AttackAndSpellcasting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int?>("CritRange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("crit_range");

                    b.Property<string>("Damage1Ability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Damage1Bonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("damage1_bonus");

                    b.Property<string>("Damage1CritDice")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("damage1_crit_dice")
                        .HasDefaultValueSql("'1d6'::character varying");

                    b.Property<string>("Damage1Dice")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("damage1_dice")
                        .HasDefaultValueSql("'1d6'::character varying");

                    b.Property<bool?>("IsProficient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_proficient");

                    b.Property<int?>("MagicBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("magic_bonus");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Range")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("range")
                        .HasDefaultValueSql("'0'::character varying");

                    b.HasKey("Id")
                        .HasName("attack_and_spellcasting_pkey");

                    b.HasIndex("CharacterId");

                    b.ToTable("attack_and_spellcasting", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.Bio", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("AdditionalFeatureAndTraits")
                        .HasColumnType("text")
                        .HasColumnName("additional_feature_and_traits");

                    b.Property<string>("AlliesAndOrganisations")
                        .HasColumnType("text")
                        .HasColumnName("allies_and_organisations");

                    b.Property<string>("Backstory")
                        .HasColumnType("text")
                        .HasColumnName("backstory");

                    b.Property<string>("CharacterAppearance")
                        .HasColumnType("text")
                        .HasColumnName("character_appearance");

                    b.Property<string>("Treasure")
                        .HasColumnType("text")
                        .HasColumnName("treasure");

                    b.HasKey("CharacterId")
                        .HasName("bio_pkey");

                    b.ToTable("bio", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bonds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("bonds")
                        .HasDefaultValueSql("''::text");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("class_id");

                    b.Property<int?>("Cp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cp");

                    b.Property<string>("CreatureType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("creature_type");

                    b.Property<int?>("DeathSaveFail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("death_save_fail");

                    b.Property<int?>("DeathSaveSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("death_save_success");

                    b.Property<int?>("Ep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("ep");

                    b.Property<int?>("Experience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("experience");

                    b.Property<string>("Flaws")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("flaws")
                        .HasDefaultValueSql("''::text");

                    b.Property<int?>("Gp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("gp");

                    b.Property<int?>("HitPointsCurrent")
                        .HasColumnType("integer")
                        .HasColumnName("hit_points_current");

                    b.Property<int?>("HitPointsMax")
                        .HasColumnType("integer")
                        .HasColumnName("hit_points_max");

                    b.Property<int?>("HitPointsTemp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("hit_points_temp");

                    b.Property<string>("Ideals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("ideals")
                        .HasDefaultValueSql("''::text");

                    b.Property<int?>("Initiative")
                        .HasColumnType("integer")
                        .HasColumnName("initiative");

                    b.Property<bool?>("Inspiration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("inspiration");

                    b.Property<int?>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PersonalityTraits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("personality_traits")
                        .HasDefaultValueSql("''::text");

                    b.Property<int?>("Pp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("pp");

                    b.Property<int?>("ProficiencyBonus")
                        .HasColumnType("integer")
                        .HasColumnName("proficiency_bonus");

                    b.Property<string>("Race")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("race");

                    b.Property<int?>("Sp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sp");

                    b.Property<int?>("SpeedBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("speed_base");

                    b.Property<int?>("SpellAttackBonus")
                        .HasColumnType("integer")
                        .HasColumnName("spell_attack_bonus");

                    b.Property<string>("SpellCastingAbility")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("spell_casting_ability");

                    b.Property<int?>("SpellSaveDc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("spell_save_dc");

                    b.Property<string>("Subclass")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subclass");

                    b.Property<string>("Subrace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subrace");

                    b.HasKey("Id")
                        .HasName("character_pkey");

                    b.HasIndex("ClassId");

                    b.ToTable("character", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.CharacterClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Source")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("source");

                    b.HasKey("Id")
                        .HasName("character_class_pkey");

                    b.ToTable("character_class", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.ClassResource", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Total")
                        .HasColumnType("integer")
                        .HasColumnName("total");

                    b.Property<int?>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("CharacterId")
                        .HasName("class_resource_pkey");

                    b.ToTable("class_resource", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.ExperienceToNextLevel", b =>
                {
                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int?>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.HasKey("Level")
                        .HasName("experience_to_next_level_pkey");

                    b.ToTable("experience_to_next_level", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.GlobalDamageModifier", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("CriticalDamageDice")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("critical_damage_dice");

                    b.Property<string>("DamageDice")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("damage_dice");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("CharacterId")
                        .HasName("global_damage_modifier_pkey");

                    b.ToTable("global_damage_modifier", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.OtherProfiencyOrLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("Profiency")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("profiency");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("other_profiency_or_language_pkey");

                    b.HasIndex("CharacterId");

                    b.ToTable("other_profiency_or_language", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.OtherResource", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Total")
                        .HasColumnType("integer")
                        .HasColumnName("total");

                    b.Property<int?>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("CharacterId")
                        .HasName("other_resource_pkey");

                    b.ToTable("other_resource", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.Skill", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int?>("AcrobaticsBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("acrobatics_bonus");

                    b.Property<int?>("AcrobaticsProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("acrobatics_proficiency");

                    b.Property<string>("AcrobaticsType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("acrobatics_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("AnimalHandlingBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("animal_handling_bonus");

                    b.Property<int?>("AnimalHandlingProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("animal_handling_proficiency");

                    b.Property<string>("AnimalHandlingType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("animal_handling_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("ArcanaBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("arcana_bonus");

                    b.Property<int?>("ArcanaProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("arcana_proficiency");

                    b.Property<string>("ArcanaType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("arcana_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("AthleticsBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("athletics_bonus");

                    b.Property<int?>("AthleticsProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("athletics_proficiency");

                    b.Property<string>("AthleticsType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("athletics_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("DeceptionBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("deception_bonus");

                    b.Property<int?>("DeceptionProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("deception_proficiency");

                    b.Property<string>("DeceptionType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deception_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("HistoryBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("history_bonus");

                    b.Property<int?>("HistoryProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("history_proficiency");

                    b.Property<string>("HistoryType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("history_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("InsightBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("insight_bonus");

                    b.Property<int?>("InsightProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("insight_proficiency");

                    b.Property<string>("InsightType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("insight_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("IntimidationBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("intimidation_bonus");

                    b.Property<int?>("IntimidationProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("intimidation_proficiency");

                    b.Property<string>("IntimidationType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("intimidation_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("InvestigationBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("investigation_bonus");

                    b.Property<int?>("InvestigationProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("investigation_proficiency");

                    b.Property<string>("InvestigationType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("investigation_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("MedicineBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("medicine_bonus");

                    b.Property<int?>("MedicineProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("medicine_proficiency");

                    b.Property<string>("MedicineType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("medicine_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("NatureBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("nature_bonus");

                    b.Property<int?>("NatureProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("nature_proficiency");

                    b.Property<string>("NatureType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nature_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("PerceptionBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("perception_bonus");

                    b.Property<int?>("PerceptionProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("perception_proficiency");

                    b.Property<string>("PerceptionType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("perception_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("PerformanceBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("performance_bonus");

                    b.Property<int?>("PerformanceProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("performance_proficiency");

                    b.Property<string>("PerformanceType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("performance_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("PersuasionBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("persuasion_bonus");

                    b.Property<int?>("PersuasionProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("persuasion_proficiency");

                    b.Property<string>("PersuasionType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("persuasion_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("ReligionBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("religion_bonus");

                    b.Property<int?>("ReligionProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("religion_proficiency");

                    b.Property<string>("ReligionType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("religion_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("SleightOfHandBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sleight_of_hand_bonus");

                    b.Property<int?>("SleightOfHandProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sleight_of_hand_proficiency");

                    b.Property<string>("SleightOfHandType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sleight_of_hand_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("StealthBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("stealth_bonus");

                    b.Property<int?>("StealthProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("stealth_proficiency");

                    b.Property<string>("StealthType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("stealth_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<int?>("SurvivalBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("survival_bonus");

                    b.Property<int?>("SurvivalProficiency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("survival_proficiency");

                    b.Property<string>("SurvivalType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("survival_type")
                        .HasDefaultValueSql("'0'::character varying");

                    b.HasKey("CharacterId")
                        .HasName("skill_pkey");

                    b.ToTable("skill", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("AtHigherLevelsDescription")
                        .HasColumnType("text")
                        .HasColumnName("at_higher_levels_description");

                    b.Property<string>("CastingTime")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("casting_time");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("Class")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("class");

                    b.Property<string>("ComponentDescription")
                        .HasColumnType("text")
                        .HasColumnName("component_description");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Duration")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("duration");

                    b.Property<string>("Innate")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("innate");

                    b.Property<bool?>("IsConcentration")
                        .HasColumnType("boolean")
                        .HasColumnName("is_concentration");

                    b.Property<bool?>("IsRitual")
                        .HasColumnType("boolean")
                        .HasColumnName("is_ritual");

                    b.Property<int?>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<bool?>("MComponent")
                        .HasColumnType("boolean")
                        .HasColumnName("m_component");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Output")
                        .HasColumnType("text")
                        .HasColumnName("output");

                    b.Property<string>("Range")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("range");

                    b.Property<bool?>("SComponent")
                        .HasColumnType("boolean")
                        .HasColumnName("s_component");

                    b.Property<string>("School")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("school");

                    b.Property<string>("SpellCastingAbility")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("spell_casting_ability");

                    b.Property<string>("Target")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("target");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.Property<bool?>("VComponent")
                        .HasColumnType("boolean")
                        .HasColumnName("v_component");

                    b.HasKey("Id")
                        .HasName("spell_pkey");

                    b.HasIndex("CharacterId");

                    b.ToTable("spell", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.ToolOrCustomSkillProficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("Attribute")
                        .HasColumnType("integer");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("ProficiencyLevel")
                        .HasColumnType("integer")
                        .HasColumnName("proficiency_level");

                    b.HasKey("Id")
                        .HasName("tool_or_custom_skill_proficiency_pkey");

                    b.ToTable("tool_or_custom_skill_proficiency", (string)null);
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.Ability", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.Character", "Character")
                        .WithOne("Ability")
                        .HasForeignKey("DND5E_CE.Server.Models.Ability", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ability_character");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.AttackAndSpellcasting", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.Character", "Character")
                        .WithMany("AttackAndSpellcastings")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attack_and_spellcasting_character");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.Bio", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.Character", "Character")
                        .WithOne("Bio")
                        .HasForeignKey("DND5E_CE.Server.Models.Bio", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_bio");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.Character", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.CharacterClass", "Class")
                        .WithMany("Characters")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("fk_character_character_class");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.ClassResource", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.Character", "Character")
                        .WithOne("ClassResource")
                        .HasForeignKey("DND5E_CE.Server.Models.ClassResource", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_resource_character");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.GlobalDamageModifier", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.Character", "Character")
                        .WithOne("GlobalDamageModifier")
                        .HasForeignKey("DND5E_CE.Server.Models.GlobalDamageModifier", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_global_damage_modifier_character");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.OtherProfiencyOrLanguage", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.Character", "Character")
                        .WithMany("OtherProfiencyOrLanguages")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_other_profiency_or_language_character");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.OtherResource", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.Character", "Character")
                        .WithOne("OtherResource")
                        .HasForeignKey("DND5E_CE.Server.Models.OtherResource", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_other_resource_character");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.Skill", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.Character", "Character")
                        .WithOne("Skill")
                        .HasForeignKey("DND5E_CE.Server.Models.Skill", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_skill_character");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.Spell", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.Character", "Character")
                        .WithMany("Spells")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spell_character");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.ToolOrCustomSkillProficiency", b =>
                {
                    b.HasOne("DND5E_CE.Server.Models.Character", "IdNavigation")
                        .WithOne("ToolOrCustomSkillProficiency")
                        .HasForeignKey("DND5E_CE.Server.Models.ToolOrCustomSkillProficiency", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tool_or_custom_skill_proficiency_character");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.Character", b =>
                {
                    b.Navigation("Ability");

                    b.Navigation("AttackAndSpellcastings");

                    b.Navigation("Bio");

                    b.Navigation("ClassResource");

                    b.Navigation("GlobalDamageModifier");

                    b.Navigation("OtherProfiencyOrLanguages");

                    b.Navigation("OtherResource");

                    b.Navigation("Skill");

                    b.Navigation("Spells");

                    b.Navigation("ToolOrCustomSkillProficiency");
                });

            modelBuilder.Entity("DND5E_CE.Server.Models.CharacterClass", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
